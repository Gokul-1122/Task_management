{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gokul\\\\Downloads\\\\Task management\\\\Task management\\\\Frontend\\\\src\\\\App.js\";\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import ProjectList from './components/projectList';\n// import TaskList from './components/taskList';\n// import ProjectForm from './forms/ProjectForm';\n// import TaskForm from './forms/taskForm';\n// import Login from './components/login';\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [tasks, setTasks] = useState([]);\n\n//   useEffect(() => {\n//     const fetchProjectsAndTasks = async () => {\n//       try {\n//         const projectsResponse = await fetch('http://localhost:3001/projects');\n//         const projectsData = await projectsResponse.json();\n//         setProjects(projectsData.projects);\n\n//         const tasksResponse = await fetch('http://localhost:3001/tasks');\n//         const tasksData = await tasksResponse.json();\n//         setTasks(tasksData.tasks);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, []);\n\n//   const handleProjectSelect = (projectId) => {\n//     setSelectedProject(projectId);\n//   };\n\n//   const handleClearProjectSelection = () => {\n//     setSelectedProject(null);\n//   };\n\n//   const addProject = async (projectName) => {\n//     try {\n//       const response = await fetch('http://localhost:3001/projects', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ name: projectName }),\n//       });\n\n//       const data = await response.json();\n//       const newProject = { id: data.projectId, name: projectName };\n//       setProjects([...projects, newProject]);\n//     } catch (error) {\n//       console.error('Error adding project:', error);\n//     }\n//   };\n\n//   const deleteProject = async (projectId) => {\n//     try {\n//       await fetch(`http://localhost:3001/projects/${projectId}`, {\n//         method: 'DELETE',\n//       });\n//       setProjects(projects.filter(project => project.id !== projectId));\n//       setSelectedProject(null);\n//     } catch (error) {\n//       console.error('Error deleting project:', error);\n//     }\n//   };\n\n//   const addTask = async (taskId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3001/tasks/${taskId}`);\n//       const data = await response.json();\n//       const newTask = { id: data.taskId, project_id: selectedProject, name: data.name, deadline: data.deadline, completed: false };\n//       setTasks([...tasks, newTask]);\n//     } catch (error) {\n//       console.error('Error adding task:', error);\n//     }\n//   };\n\n//   const deleteTask = async (taskId) => {\n//     try {\n//       await fetch(`http://localhost:3001/tasks/${taskId}`, {\n//         method: 'DELETE',\n//       });\n//       setTasks(tasks.filter(task => task.id !== taskId));\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {!isLoggedIn && <Login setIsLoggedIn={setIsLoggedIn} />}\n//       {isLoggedIn && (\n//         <>\n//           <div className=\"project-section\">\n//             <ProjectForm addProject={addProject} />\n//             <ProjectList\n//               deleteProject={deleteProject}\n//               handleProjectSelect={handleProjectSelect}\n//               selectedProject={selectedProject}\n//               handleClearProjectSelection={handleClearProjectSelection}\n//               projects={projects}\n//             />\n//           </div>\n//           <div className=\"task-section\">\n//             {selectedProject && <TaskForm projects={projects} addTask={addTask} />}\n//             <TaskForm projects={projects} addTask={addTask} />\n//             <TaskList\n//               projectId={selectedProject}\n//               tasks={tasks}\n//               deleteTask={deleteTask}\n//             />\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Login from './layout/login';\nimport Dashboard from './layout/dashboard';\nimport Signup from './layout/signup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          element: /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/dashboard\",\n          element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","Routes","Login","Dashboard","Signup","jsxDEV","_jsxDEV","App","className","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Gokul/Downloads/Task management/Task management/Frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import ProjectList from './components/projectList';\n// import TaskList from './components/taskList';\n// import ProjectForm from './forms/ProjectForm';\n// import TaskForm from './forms/taskForm';\n// import Login from './components/login';\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [selectedProject, setSelectedProject] = useState(null);\n//   const [projects, setProjects] = useState([]);\n//   const [tasks, setTasks] = useState([]);\n\n//   useEffect(() => {\n//     const fetchProjectsAndTasks = async () => {\n//       try {\n//         const projectsResponse = await fetch('http://localhost:3001/projects');\n//         const projectsData = await projectsResponse.json();\n//         setProjects(projectsData.projects);\n\n//         const tasksResponse = await fetch('http://localhost:3001/tasks');\n//         const tasksData = await tasksResponse.json();\n//         setTasks(tasksData.tasks);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, []);\n\n//   const handleProjectSelect = (projectId) => {\n//     setSelectedProject(projectId);\n//   };\n\n//   const handleClearProjectSelection = () => {\n//     setSelectedProject(null);\n//   };\n\n//   const addProject = async (projectName) => {\n//     try {\n//       const response = await fetch('http://localhost:3001/projects', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ name: projectName }),\n//       });\n      \n//       const data = await response.json();\n//       const newProject = { id: data.projectId, name: projectName };\n//       setProjects([...projects, newProject]);\n//     } catch (error) {\n//       console.error('Error adding project:', error);\n//     }\n//   };\n\n//   const deleteProject = async (projectId) => {\n//     try {\n//       await fetch(`http://localhost:3001/projects/${projectId}`, {\n//         method: 'DELETE',\n//       });\n//       setProjects(projects.filter(project => project.id !== projectId));\n//       setSelectedProject(null);\n//     } catch (error) {\n//       console.error('Error deleting project:', error);\n//     }\n//   };\n\n//   const addTask = async (taskId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3001/tasks/${taskId}`);\n//       const data = await response.json();\n//       const newTask = { id: data.taskId, project_id: selectedProject, name: data.name, deadline: data.deadline, completed: false };\n//       setTasks([...tasks, newTask]);\n//     } catch (error) {\n//       console.error('Error adding task:', error);\n//     }\n//   };\n\n//   const deleteTask = async (taskId) => {\n//     try {\n//       await fetch(`http://localhost:3001/tasks/${taskId}`, {\n//         method: 'DELETE',\n//       });\n//       setTasks(tasks.filter(task => task.id !== taskId));\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {!isLoggedIn && <Login setIsLoggedIn={setIsLoggedIn} />}\n//       {isLoggedIn && (\n//         <>\n//           <div className=\"project-section\">\n//             <ProjectForm addProject={addProject} />\n//             <ProjectList\n//               deleteProject={deleteProject}\n//               handleProjectSelect={handleProjectSelect}\n//               selectedProject={selectedProject}\n//               handleClearProjectSelection={handleClearProjectSelection}\n//               projects={projects}\n//             />\n//           </div>\n//           <div className=\"task-section\">\n//             {selectedProject && <TaskForm projects={projects} addTask={addTask} />}\n//             <TaskForm projects={projects} addTask={addTask} />\n//             <TaskList\n//               projectId={selectedProject}\n//               tasks={tasks}\n//               deleteTask={deleteTask}\n//             />\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React from 'react';\n\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Login from './layout/login';\nimport Dashboard from './layout/dashboard';\nimport Signup from './layout/signup';\n\n \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Routes>\n        <Route path=\"/\" element = {<Login/>} />\n        <Route path=\"/signup\" element = {<Signup/>} />\n        <Route path=\"/dashboard\" element = {<Dashboard/>} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\nexport default App;"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,MAAM,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIrC,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBH,OAAA,CAACP,MAAM;MAAAU,QAAA,eACLH,OAAA,CAACL,MAAM;QAAAQ,QAAA,gBACPH,OAAA,CAACN,KAAK;UAACU,IAAI,EAAC,GAAG;UAACC,OAAO,eAAIL,OAAA,CAACJ,KAAK;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCT,OAAA,CAACN,KAAK;UAACU,IAAI,EAAC,SAAS;UAACC,OAAO,eAAIL,OAAA,CAACF,MAAM;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9CT,OAAA,CAACN,KAAK;UAACU,IAAI,EAAC,YAAY;UAACC,OAAO,eAAIL,OAAA,CAACH,SAAS;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACC,EAAA,GAZQT,GAAG;AAaZ,eAAeA,GAAG;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}