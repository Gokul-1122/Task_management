{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import '../css/taskList.css';\n// import { FaTrash, FaSearch } from 'react-icons/fa';\n\n// const TaskList = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [projects, setProjects] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState('');\n//   const [isSearchVisible, setIsSearchVisible] = useState(false);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         const tasksResponse = await fetch('http://localhost:3001/tasks/');\n//         const tasksData = await tasksResponse.json();\n//         setTasks(tasksData.tasks);\n\n//         const projectsResponse = await fetch('http://localhost:3001/projects/');\n//         const projectsData = await projectsResponse.json();\n//         setProjects(projectsData.projects);\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n//     }\n\n//     fetchData();\n//   }, []); \n\n//   const handleTaskDelete = async (taskId) => {\n//     console.log(\"dlte\");\n//     try {\n//       await fetch(`http://localhost:3001/tasks/${taskId}`, {\n//         method: 'DELETE',\n//       });\n//       const updatedTasks = tasks.filter(task => task.id !== taskId);\n//       setTasks(updatedTasks);\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const getProjectName = (projectId) => {\n//     console.log('Projects:', projects);\n//     const project = projects.find(project => project.id === projectId);\n//     console.log('Found Project:', project);\n//     console.log(projects.projectId);\n//     return project ? project.name : 'Unknown Project';\n//   };\n\n//   const handleStatusChange = async (taskId, status) => {\n//     try {\n//       const updatedTasks = tasks.map(task =>\n//         task.id === taskId ? { ...task, completed: status === 'completed' } : task\n//       );\n//       setTasks(updatedTasks);\n\n//       await fetch(`http://localhost:3001/tasks/${taskId}`, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ completed: status === 'completed' }),\n//       });\n//     } catch (error) {\n//       console.error('Error updating task status:', error);\n//     }\n//   };\n\n//   const toggleSearchBar = () => {\n//     setIsSearchVisible(!isSearchVisible);\n//   };\n\n//   const filteredTasks = tasks.filter(task =>\n//     task.name.toLowerCase().includes(searchQuery.toLowerCase())||\n//     task.deadline.toLowerCase().includes(searchQuery.toLowerCase())\n//   );\n\n//   return (\n//     <div className=\"task-list\">\n//       <div className='search'>\n//         <button><FaSearch onClick={toggleSearchBar} /></button> \n//         {isSearchVisible && (\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search tasks...\"\n//             value={searchQuery}\n//             onChange={(e) => setSearchQuery(e.target.value)}\n//           />\n//         )}\n//       </div>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Project Name</th>\n//             <th>Task Name</th>\n//             <th>Deadline</th>\n//             <th>Status</th>\n//             <th>Delete</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {filteredTasks.map(task => (\n//             <tr key={task.id}>\n//               <td>{getProjectName(task.project_id)}</td>\n//               <td>{task.name}</td>\n//               <td>{task.deadline}</td>\n//               <td>\n//                 <div className='status'>\n//                   <select \n//                     value={task.completed ? 'completed' : 'on-progress'}\n//                     onChange={(e) => handleStatusChange(task.id, e.target.value)}\n//                   >\n//                     <option value=\"on-progress\">On Progress</option>\n//                     <option value=\"completed\">Completed</option>\n//                   </select>\n//                 </div>\n\n//               </td>\n//               <td className=\"dlte-task\">\n//                 <button onClick={() => handleTaskDelete(task.id)}><FaTrash/></button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default TaskList;","map":{"version":3,"names":[],"sources":["C:/Users/Gokul/Downloads/Task management/Task management/Frontend/src/components/taskList.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import '../css/taskList.css';\r\n// import { FaTrash, FaSearch } from 'react-icons/fa';\r\n\r\n// const TaskList = () => {\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [projects, setProjects] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState('');\r\n//   const [isSearchVisible, setIsSearchVisible] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchData() {\r\n//       try {\r\n//         const tasksResponse = await fetch('http://localhost:3001/tasks/');\r\n//         const tasksData = await tasksResponse.json();\r\n//         setTasks(tasksData.tasks);\r\n\r\n//         const projectsResponse = await fetch('http://localhost:3001/projects/');\r\n//         const projectsData = await projectsResponse.json();\r\n//         setProjects(projectsData.projects);\r\n//       } catch (error) {\r\n//         console.error('Error:', error);\r\n//       }\r\n//     }\r\n\r\n//     fetchData();\r\n//   }, []); \r\n\r\n//   const handleTaskDelete = async (taskId) => {\r\n//     console.log(\"dlte\");\r\n//     try {\r\n//       await fetch(`http://localhost:3001/tasks/${taskId}`, {\r\n//         method: 'DELETE',\r\n//       });\r\n//       const updatedTasks = tasks.filter(task => task.id !== taskId);\r\n//       setTasks(updatedTasks);\r\n//     } catch (error) {\r\n//       console.error('Error deleting task:', error);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const getProjectName = (projectId) => {\r\n//     console.log('Projects:', projects);\r\n//     const project = projects.find(project => project.id === projectId);\r\n//     console.log('Found Project:', project);\r\n//     console.log(projects.projectId);\r\n//     return project ? project.name : 'Unknown Project';\r\n//   };\r\n  \r\n\r\n//   const handleStatusChange = async (taskId, status) => {\r\n//     try {\r\n//       const updatedTasks = tasks.map(task =>\r\n//         task.id === taskId ? { ...task, completed: status === 'completed' } : task\r\n//       );\r\n//       setTasks(updatedTasks);\r\n\r\n//       await fetch(`http://localhost:3001/tasks/${taskId}`, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify({ completed: status === 'completed' }),\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error updating task status:', error);\r\n//     }\r\n//   };\r\n\r\n//   const toggleSearchBar = () => {\r\n//     setIsSearchVisible(!isSearchVisible);\r\n//   };\r\n\r\n//   const filteredTasks = tasks.filter(task =>\r\n//     task.name.toLowerCase().includes(searchQuery.toLowerCase())||\r\n//     task.deadline.toLowerCase().includes(searchQuery.toLowerCase())\r\n//   );\r\n  \r\n//   return (\r\n//     <div className=\"task-list\">\r\n//       <div className='search'>\r\n//         <button><FaSearch onClick={toggleSearchBar} /></button> \r\n//         {isSearchVisible && (\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Search tasks...\"\r\n//             value={searchQuery}\r\n//             onChange={(e) => setSearchQuery(e.target.value)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Project Name</th>\r\n//             <th>Task Name</th>\r\n//             <th>Deadline</th>\r\n//             <th>Status</th>\r\n//             <th>Delete</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {filteredTasks.map(task => (\r\n//             <tr key={task.id}>\r\n//               <td>{getProjectName(task.project_id)}</td>\r\n//               <td>{task.name}</td>\r\n//               <td>{task.deadline}</td>\r\n//               <td>\r\n//                 <div className='status'>\r\n//                   <select \r\n//                     value={task.completed ? 'completed' : 'on-progress'}\r\n//                     onChange={(e) => handleStatusChange(task.id, e.target.value)}\r\n//                   >\r\n//                     <option value=\"on-progress\">On Progress</option>\r\n//                     <option value=\"completed\">Completed</option>\r\n//                   </select>\r\n//                 </div>\r\n                \r\n//               </td>\r\n//               <td className=\"dlte-task\">\r\n//                 <button onClick={() => handleTaskDelete(task.id)}><FaTrash/></button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TaskList;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}